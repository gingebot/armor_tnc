#!/bin/python3
from optparse import OptionParser
import socket, random, logging, os, sys
from multiprocessing import Process, Manager
from time import time, sleep
import argparse
import urllib.request
import datetime
import yaml
import logging.handlers

import traceback
from influxdb_client import InfluxDBClient
import urllib3

host = socket.gethostname()
results = []
timestamp = datetime.datetime.now().isoformat()
CONFIG_PATH = ['./', '/etc/']
CONFIG_FILE = 'armor_tnc.conf'

def return_config():

    for i in CONFIG_PATH:
        if os.path.isfile('{0}{1}'.format(i,CONFIG_FILE)):
            with open('{0}{1}'.format(i,CONFIG_FILE)) as config_file:
                config = yaml.safe_load(config_file)
                return config
    sys.exit('\nExiting, config not found, {0} must be accessible in one of the following paths: {1}\n'.format(CONFIG_FILE, CONFIG_PATH))

def configure_logging():

    global logger
    logger = logging.getLogger()
    handler = logging.handlers.SysLogHandler(facility=logging.handlers.SysLogHandler.LOG_DAEMON, address='/dev/log')
    logFormatter = logging.Formatter('AMOR TNC | %(asctime)s | %(levelname)s | %(name)s | %(message)s')
    handler.setFormatter(logFormatter)
    logger.addHandler(handler)
    if VERBOSE:
        logger.setLevel('DEBUG')
        configure_verbose()
    else:
        logger.setLevel(CONFIG.get('log_level'))

def configure_verbose():

    global logger
    logFormatter = logging.Formatter('%(asctime)s | %(levelname)s | %(name)s | %(message)s')
    console_output = logging.StreamHandler()
    console_output.setFormatter(logFormatter)
    logger.addHandler(console_output)

def socket_test(conn_details, results):
    s = socket.socket()
    s.bind((conn_details['address'], 0))
    s.settimeout(2)
    try:
        s.connect((conn_details['domain'],conn_details['port']))
        s.close()
        conn_details['result'] = 1
    except:
        conn_details['result'] = 0
        s.close()
    results.append(conn_details)
    return

def perform_tests():
    global results
    with Manager() as manager:
        start = time()
        results_manager = manager.list()
        jobs = []

        for x in CONFIG.get('source_ips'):
            x['public_address'] = return_public(x['address'])
            result_set = {}
            for i in CONFIG.get('sockets'):
                x['domain'] = i['domain']
                x['port'] = i['port']
                p = Process(target=socket_test, args=(x,results_manager))
                p.start()
                jobs.append(p)
        for p in jobs:
            p.join(timeout=8)
            end = time()
        results += results_manager

def print_results(results):

    print('\nHost: {}\n'.format(host))
    print('{0:<15}{1:<15}{2:<15}{3:<25}{4:<10}{5}'.format('Source IP','Address Type','Public IP','Domain', 'Port', 'Connectivity Result'))
    for i in results:
        
        print('{0:<15}{1:<15}{2:<15}{3:<25}{4:<10}{5}'.format(i['address'],i['alias'],i['public_address'],i['domain'],i['port'],i['result']))
    print()

def log_results(results):

    for i in results:
        logger.info('TEST RESULTS: HOST: {6:<5} Src: {0:<15} Type: {1:<8} Pub: {2:<15} Domain: {3:<25} Port: {4:<10} Result: {5}'.format(i['address'],i['alias'],i['public_address'],i['domain'],i['port'],i['result'], host))

def prepare_json(results):

    data = []
    for i in results:
        record = {
        "measurement": "tcp_connect",
        "tags": {
            "host": host,
            "domain": '{0}:{1}'.format(i['domain'],i['port']),
            "addr_type": i['alias'],
            "source_ip": i['address'],
            "public_ip": i['public_address'],
            },
        "time": timestamp,
        "fields": {
            "Success": int(i['result']),
            },
        }
        data.append(record)
    return data

def return_public(sourceip):

    logger.info('Resolving source IP for %s' % sourceip)
    sourceip = sourceip
    true_socket = socket.socket
    try:
        def bound_socket(*a, **k):
            sock = true_socket(*a, **k)
            sock.bind((sourceip, 0))
            return sock
        socket.socket = bound_socket
        result = urllib.request.urlopen('https://ident.me').read().decode('utf8')
    except Exception as error:
        logger.critical(error)
        result = 'NA'
    logger.info('Source IP: %s' % result)
    socket.socket = true_socket
    return result

def write_db(db_data):

    logger.info('Writing results to DB')
    logger.debug('Results: %s' % db_data)
    try:
        DB_CONFIG = CONFIG.get('database')
        url = 'http://{0}:{1}'.format(DB_CONFIG.get('db_host'), DB_CONFIG.get('db_port'))
        token = DB_CONFIG.get('db_token')
        org = DB_CONFIG.get('db_org')
        client = InfluxDBClient(url=url, token=token, org=org)
        write_api = client.write_api()
        write_api.write(DB_CONFIG.get('db_bucket'),DB_CONFIG.get('db_org'), db_data)
        write_api.close()
    except Exception as error:
        logger.critical(error)


if __name__ == '__main__':
    global VERBOSE
    global CONFIG

    CONFIG = return_config()
    urllib3.disable_warnings()
    parser = argparse.ArgumentParser(description='Check connectivity to Armor hosts via a NAT\'d IP and non NAT IP')
    parser.add_argument('-t', '--text', action='store_true', help='text output of result to stdout')
    parser.add_argument('-d', '--database', action='store_true', help='write results to database')
    parser.add_argument('-v', '--verbose', action='store_true', help='verbose logging to stdout')
    args = parser.parse_args()
    if not args.text and not args.database:
        sys.exit('\nno option provided, see --help for available options\n')

    VERBOSE = args.verbose
    configure_logging()

    perform_tests()
    log_results(results)    
    if args.text:
        print_results(results)
    if args.database:
        db_data = prepare_json(results)
        write_db(db_data)
